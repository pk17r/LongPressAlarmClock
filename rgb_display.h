#ifndef RGB_DISPLAY_H
#define RGB_DISPLAY_H

#include "pin_defs.h"
#include "common.h"
#include "alarm_clock.h"
#include <Arduino.h>
#include <Adafruit_GFX.h>     // Core graphics library
#if defined(DISPLAY_IS_ST7789V)
  #include <Adafruit_ST7789.h> // Hardware-specific library for ST7789
#elif defined(DISPLAY_IS_ST7735)
  #include <Adafruit_ST7735.h>  // Hardware-specific library for ST7735
#elif defined(DISPLAY_IS_ILI9341)
  #include "Adafruit_ILI9341.h"
#elif defined(DISPLAY_IS_ILI9488)
  #include "ILI9488_t3.h"   // Teensy Hardware DMA accelerated library
#endif
#include <Fonts/ComingSoon_Regular70pt7b.h>   // from https://fonts.google.com/ and converted using https://rop.nl/truetype2gfx/
#include <Fonts/FreeSansBold48pt7b.h>
#include <Fonts/Satisfy_Regular24pt7b.h>     // from https://fonts.google.com/ and converted using https://rop.nl/truetype2gfx/
#include <Fonts/FreeSansBold24pt7b.h>
#include <Fonts/FreeSans24pt7b.h>
#include <Fonts/FreeSans18pt7b.h>
#include <Fonts/Satisfy_Regular18pt7b.h>     // from https://fonts.google.com/ and converted using https://rop.nl/truetype2gfx/
#include <Fonts/FreeSans12pt7b.h>
#include <Fonts/FreeMono9pt7b.h>
#include <SPI.h>
#include <elapsedMillis.h>
#include <memory>     // for unique_ptr


class RGBDisplay {

public:

// PUBLIC FUNCTIONS

  // constructor
  RGBDisplay();
  // destructor
  ~RGBDisplay();

  // screens
  void displayTimeUpdate();
  void screensaver();
  void goodMorningScreen();
  void setAlarmScreen(bool firstDraw, int16_t ts_x, int16_t ts_y);
  void alarmTriggeredScreen(bool firstTime, int8_t buttonPressSecondsCounter);
  void settingsPage();

  // functions
  void setup();
  void setBrightness(int brightness);
  void setMaxBrightness();
  void checkTimeAndSetBrightness();
  void screensaverControl(bool turnOn);
  void prepareTimeDayDateArrays();
  void serialPrintRtcDateTime();
  void updateSecondsOnTimeStrArr(uint8_t &second);
  int classifyMainPageTouchInput(int16_t ts_x, int16_t ts_y);

// PUBLIC VARIABLES

  // display object
  #if defined(DISPLAY_IS_ST7789V)
    // Adafruit_ST7789 tft = Adafruit_ST7789(TFT_CS, TFT_DC, TFT_COPI, TFT_CLK, TFT_RST);
    Adafruit_ST7789 tft = Adafruit_ST7789(&SPI, TFT_CS, TFT_DC, TFT_RST);   // when multiple SPI Peripherals are present then only this works
  #elif defined(DISPLAY_IS_ST7735)
    // For 1.8" TFT with ST7735 using Hardware VSPI Pins COPI and SCK:
    Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);
  #elif defined(DISPLAY_IS_ILI9341)
    Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC, TFT_COPI, TFT_CLK, TFT_RST, TFT_CIPO);
  #elif defined(DISPLAY_IS_ILI9488)
    // Use hardware SPI (#13, #12, #11) and the above for CS/DC
    ILI9488_t3 tft = ILI9488_t3(&SPI, TFT_CS, TFT_DC, TFT_RST, TFT_COPI, TFT_CLK, TFT_CIPO);
  #endif

  // redraw full display flag
  bool redrawDisplay = false;

  // refresh screensaver canvas
  bool refreshScreensaverCanvas = true;

  // tft dimensions
  const uint16_t TFT_WIDTH = 320, TFT_HEIGHT = 240;
  // SPISettings settingsA(80000000, MSBFIRST, SPI_MODE0);


private:

// PRIVATE FUNCTIONS

  void drawSun(int16_t x0, int16_t y0, uint16_t edge);
  void drawRays(int16_t &cx, int16_t &cy, int16_t &rr, int16_t &rl, int16_t &rw, uint8_t &rn, int16_t &degStart, uint16_t &color);
  void drawDenseCircle(int16_t &cx, int16_t &cy, int16_t r, uint16_t &color);
  void pickNewRandomColor();  // for screensaver
  void drawButton(int16_t x, int16_t y, uint16_t w, uint16_t h, char* label, uint16_t borderColor, uint16_t onFill, uint16_t offFill, bool isOn);
  void drawTriangleButton(int16_t x, int16_t y, uint16_t w, uint16_t h, bool isUp, uint16_t borderColor, uint16_t fillColor);
  void fastDrawBitmap(int16_t x, int16_t y, uint8_t* bitmap, int16_t w, int16_t h, uint16_t color, uint16_t bg);

// PRIVATE VARIABLES

  // current screen brightness
  int current_brightness = 0;

  // screensaver
  bool screensaverMoveDown = true, screensaverMoveRight = true;
  int currentRandomColorIndex = 0;
  GFXcanvas1* myCanvas = NULL;
  // std::unique_ptr<GFXcanvas16> myCanvas;
  // vector<GFXcanvas16> myCanvasVec(1);
  bool showColoredEdgeScreensaver = true;
  bool flyScreensaverHorizontally = false;

  // location of various display text strings
  int16_t gap_right_x = 0, gap_up_y = 0;
  int16_t tft_HHMM_x0 = TIME_ROW_X0, tft_HHMM_y0 = 2 * TIME_ROW_Y0;
  uint16_t tft_HHMM_w = 0, tft_HHMM_h = 0;
  int16_t screensaver_x1 = 0, screensaver_y1 = 0;
  uint16_t screensaver_w = 0, screensaver_h = 0;
  int16_t tft_AmPm_x0 = 0, tft_AmPm_y0 = 0;
  int16_t tft_SS_x0 = 0;
  int16_t date_row_x0 = 0;
  int16_t alarm_row_x0 = 0;
  int16_t alarm_icon_x0 = 0, alarm_icon_y0 = 0;

  // Display Visible Data Struct
  const int HHMM_ARR_SIZE = 6, SS_ARR_SIZE = 4, DATE_ARR_SIZE = 13, ALARM_ARR_SIZE = 10;
  struct displayData {
    char* timeHHMM;
    char* timeSS;
    char* dateStr;
    char* alarmStr;
    bool _12hourMode;
    bool _pmNotAm;
    bool _alarmOn;
  } newDisplayData, displayedData;


// PRIVATE CONSTANTS
  
  // display brightness constants
  const int NIGHT_BRIGHTNESS = 1;
  const int EVENING_BRIGHTNESS = 100;
  const int DAY_BRIGHTNESS = 150;
  const int MAX_BRIGHTNESS = 255;

  // user defined locations of various text strings on display
  const int16_t TIME_ROW_X0 = 10, TIME_ROW_Y0 = 80, AM_PM_ROW_Y0 = 45;
  const int16_t DISPLAY_TEXT_GAP = 5;
  const int16_t DATE_ROW_Y0 = 140;
  const int16_t ALARM_ROW_Y0 = 210, ALARM_ROW_Y1 = 160;
  const int16_t SETTINGS_PAGE_BACK_BUTTON_Y1 = TFT_HEIGHT - 50;
  const int16_t RADIUS_BUTTON_ROUND_RECT = 5;

  // day arrays
  #define DAY_ARR_SIZE 4
  const char day_Sun[DAY_ARR_SIZE] = "Sun";
  const char day_Mon[DAY_ARR_SIZE] = "Mon";
  const char day_Tue[DAY_ARR_SIZE] = "Tue";
  const char day_Wed[DAY_ARR_SIZE] = "Wed";
  const char day_Thu[DAY_ARR_SIZE] = "Thu";
  const char day_Fri[DAY_ARR_SIZE] = "Fri";
  const char day_Sat[DAY_ARR_SIZE] = "Sat";

  // Then set up a table to refer to your strings.
  const char *const days_table[7] = { day_Sun, day_Mon, day_Tue, day_Wed, day_Thu, day_Fri, day_Sat };

  // day arrays
  #define MONTH_ARR_SIZE 4
  const char month_Jan[MONTH_ARR_SIZE] = "Jan";
  const char month_Feb[MONTH_ARR_SIZE] = "Feb";
  const char month_Mar[MONTH_ARR_SIZE] = "Mar";
  const char month_Apr[MONTH_ARR_SIZE] = "Apr";
  const char month_May[MONTH_ARR_SIZE] = "May";
  const char month_Jun[MONTH_ARR_SIZE] = "Jun";
  const char month_Jul[MONTH_ARR_SIZE] = "Jul";
  const char month_Aug[MONTH_ARR_SIZE] = "Aug";
  const char month_Sep[MONTH_ARR_SIZE] = "Sep";
  const char month_Oct[MONTH_ARR_SIZE] = "Oct";
  const char month_Nov[MONTH_ARR_SIZE] = "Nov";
  const char month_Dec[MONTH_ARR_SIZE] = "Dec";

  // Then set up a table to refer to your strings.
  const char *const months_table[12] = { month_Jan, month_Feb, month_Mar, month_Apr, month_May, month_Jun, month_Jul, month_Aug, month_Sep, month_Oct, month_Nov, month_Dec };

  const char amLabel[3] = "AM", pmLabel[3] = "PM", offLabel[4] = "Off", alarmLabel[6] = "Alarm";
  const char charSpace = ' ';

  // color definitions
  const uint16_t  Display_Color_Black        = 0x0000;
  const uint16_t  Display_Color_Blue         = 0x001F;
  const uint16_t  Display_Color_Red          = 0xF800;
  const uint16_t  Display_Color_Orange       = 0xfca0;
  const uint16_t  Display_Color_Green        = 0x07E0;
  const uint16_t  Display_Color_Cyan         = 0x07FF;
  const uint16_t  Display_Color_Magenta      = 0xF81F;
  const uint16_t  Display_Color_Yellow       = 0xFFE0;
  const uint16_t  Display_Color_White        = 0xFFFF;

  // https://github.com/newdigate/rgb565_colors
  #define RGB565_Argentinian_blue                                            		0x6D9D         // Argentinian Blue                        	#6CB4EE			https://en.wikipedia.org/wiki/Shades_of_azure#Argentinian_blue
  #define RGB565_Light_sky_blue                                              		0x867E         // Light Sky Blue                          	#87CEFA			https://en.wikipedia.org/wiki/Shades_of_azure#Light_sky_blue
  #define RGB565_Blue_violet                                                 		0x897B         // Blue-violet                             	#8A2BE2			https://en.wikipedia.org/wiki/Indigo#Deep_indigo_(web_color_blue-violet)
  #define RGB565_Vivid_sky_blue                                              		0x065F         // Vivid sky blue                          	#00CCFF			https://en.wikipedia.org/wiki/Sky_blue#Vivid_sky_blue
  #define RGB565_Beige                                                       		0xF7BB         // Beige                                   	#F5F5DC			https://en.wikipedia.org/wiki/Shades_of_brown#Beige
  #define RGB565_Buff                                                        		0xDD0D         // Buff                                    	#DAA06D			https://en.wikipedia.org/wiki/Shades_of_brown#Buff
  #define RGB565_Sandy_brown                                                 		0xF52C         // Sandy Brown                             	#F4A460			https://en.wikipedia.org/wiki/Shades_of_brown#Sandy_brown
  #define RGB565_Cyan                                                        		0x07FF         // Cyan                                    	#00FFFF			https://en.wikipedia.org/wiki/Shades_of_cyan#Cyan
  #define RGB565_Turquoise                                                   		0x46F9         // Turquoise                               	#40E0D0			https://en.wikipedia.org/wiki/Shades_of_cyan#Turquoise
  #define RGB565_Puce                                                        		0xCC53         // Puce                                    	#CC8899			https://en.wikipedia.org/wiki/Shades_of_gray#Puce
  #define RGB565_Bright_green                                                		0x67E0         // Bright green                            	#66FF00			https://en.wikipedia.org/wiki/Shades_of_green#Bright_green
  #define RGB565_Caribbean_green                                             		0x0653         // Caribbean green                         	#00CC99			https://en.wikipedia.org/wiki/Spring_green#Caribbean_green
  #define RGB565_Electric_green                                              		0x07E0         // Electric green                          	#00FF00			https://en.wikipedia.org/wiki/Electric_green
  #define RGB565_Green_yellow                                                		0xAFE6         // Green-yellow                            	#ADFF2F			https://en.wikipedia.org/wiki/Shades_of_green#Yellow-green
  #define RGB565_Magenta                                                     		0xF81F         // Magenta                                 	#FF00FF			https://en.wikipedia.org/wiki/Shades_of_magenta#Magenta
  #define RGB565_Shocking_pink                                               		0xF897         // Shocking Pink                           	#FC0FC0			https://en.wikipedia.org/wiki/Shades_of_magenta#Shocking_pink
  #define RGB565_Apricot                                                     		0xFE76         // Apricot                                 	#FBCEB1			https://en.wikipedia.org/wiki/Shades_of_orange#Apricot
  #define RGB565_Atomic_tangerine                                            		0xFCCC         // Atomic tangerine                        	#FF9966			https://en.wikipedia.org/wiki/Shades_of_orange#Atomic_tangerine
  #define RGB565_Dark_orange                                                 		0xFC60         // Dark orange                             	#FF8C00			https://en.wikipedia.org/wiki/Shades_of_orange#Dark_orange
  #define RGB565_Orange                                                      		0xFBE0         // Orange                                  	#FF7F00			https://en.wikipedia.org/wiki/Shades_of_orange#Orange
  #define RGB565_Tart_orange                                                 		0xFA69         // Tart Orange                             	#FB4D46			https://en.wikipedia.org/wiki/List_of_Crayola_crayon_colors#Heads_n_Tails
  #define RGB565_Light_deep_pink                                             		0xFAF9         // Light Deep Pink                         	#FF5CCD			https://en.wikipedia.org/wiki/Shades_of_pink#Light_deep_pink
  #define RGB565_Pink_flamingo                                               		0xFBBF         // Pink flamingo                           	#FC74FD			https://en.wikipedia.org/wiki/Manatee_(color)
  #define RGB565_Electric_purple                                             		0xB81F         // Electric Purple                         	#BF00FF			https://en.wikipedia.org/wiki/Shades_of_purple#Electric_purple
  #define RGB565_Purple_x11                                                  		0x991D         // Purple (X11)                            	#A020F0			https://en.wikipedia.org/wiki/Shades_of_purple#Purple_(X11_color)_(veronica)
  #define RGB565_Candy_apple_red                                             		0xF840         // Candy apple red                         	#FF0800			https://en.wikipedia.org/wiki/Candy_apple_red
  #define RGB565_Red_rgb                                                     		0xF800         // Red (RGB)                               	#FF0000			https://en.wikipedia.org/wiki/Shades_of_red#Red_rgb
  #define RGB565_Tomato                                                      		0xFB09         // Tomato                                  	#FF6347			https://en.wikipedia.org/wiki/Shades_of_red#Tomato
  #define RGB565_Ivory                                                       		0xFFFD         // Ivory                                   	#FFFFF0			https://en.wikipedia.org/wiki/Shades_of_white#Ivory
  #define RGB565_Chartreuse_web                                              		0x7FE0         // Chartreuse web                          	#7FFF00			https://en.wikipedia.org/wiki/Chartreuse_(color)
  #define RGB565_Golden_yellow                                               		0xFEE0         // Golden yellow                           	#FFDF00			https://en.wikipedia.org/wiki/Gold_(color)#Golden_yellow
  #define RGB565_Yellow_rgb_x11_yellow                                       		0xFFE0         // Yellow (RGB) (X11 yellow)               	#FFFF00			https://en.wikipedia.org/wiki/Shades_of_yellow#Yellow_rgb_x11_yellow
  #define RGB565_Lime_color_wheel                                            		0xBFE0         // Lime (color wheel)                      	#BFFF00			https://en.wikipedia.org/wiki/Lime_(color)

  constexpr static uint8_t COLOR_PICKER_WHEEL_SIZE = 33;
  const uint16_t colorPickerWheelBright[COLOR_PICKER_WHEEL_SIZE] = {0x6D9D, 0x867E, 0x897B, 0x065F, 0xF7BB, 0xDD0D, 0xF52C, 0x07FF, 0x46F9, 0xCC53, 0x67E0, 0x0653, 0x07E0, 0xAFE6, 0xF81F, 0xF897, 0xFE76, 0xFCCC, 0xFC60, 0xFBE0, 0xFA69, 0xFAF9, 0xFBBF, 0xB81F, 0x991D, 0xF840, 0xF800, 0xFB09, 0xFFFD, 0x7FE0, 0xFEE0, 0xFFE0, 0xBFE0};

  // The colors we actually want to use
  const uint16_t        Display_Time_Color         = Display_Color_Yellow;
  const uint16_t        Display_Date_Color         = Display_Color_Green;
  const uint16_t        Display_Alarm_Color        = Display_Color_Cyan;
  const uint16_t        Display_Backround_Color    = Display_Color_Black;

  // BIG BELL ICONS

  const uint8_t BELL_W = 114, BELL_H = 75;
  // 'bell_114x75, 114x75px
  // convert image into binary monochrome using https://javl.github.io/image2cpp/
  const unsigned char bell_bitmap[1125] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x07, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 
    0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
    0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
    0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
    0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x03, 0x80, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x07, 
    0xe0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x07, 0xf8, 
    0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x07, 0xfe, 0x00, 
    0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x03, 0xff, 0xc0, 0x00, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xe0, 0x00, 0x00, 0xff, 0xf0, 0x00, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0x80, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0x80, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0x80, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x80, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xc0, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xc0, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xe0, 0x1f, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xf0, 0x3f, 0xff, 0xfc, 0x00, 0x3f, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xf0, 0x3f, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
    0x3f, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 
    0xff, 0xfe, 0x00, 0x1f, 0xf8, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x0f, 
    0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x0e, 
    0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 
    0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
    0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 
    0x03, 0xff, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x1f, 
    0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x3f, 0xfe, 
    0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x3f, 0xf0, 0x00, 
    0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x3f, 0x80, 0x00, 0x00, 
    0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00
  };

  const uint8_t BELL_FALLEN_W = 75, BELL_FALLEN_H = 71;
  // 'bell_fallen_75x71, 75x71px
  const unsigned char bell_fallen_bitmap[710] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 
    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
    0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 
    0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x0f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x7c, 
    0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x80, 0x00, 0x00, 0x03, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xe0, 0x00, 
    0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xf0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xf8, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xfc, 0x00, 0x00, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xfc, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xfe, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xfe, 0x00, 0x03, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xef, 0xfe, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
    0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xf7, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 
    0xfe, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xfd, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xfc, 0x00, 
    0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xfe, 0xf8, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf0, 0x00, 0x3f, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0x40, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 
    0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x80, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x0f, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xc0, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 
    0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x7f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xf0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 
    0x00, 0x03, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 
    0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };

  // SMALL BELL ICONS

  const uint8_t BELL_SMALL_W = 70, BELL_SMALL_H = 46;
  // 'bell_114x75', 70x46px
  const unsigned char bell_small_bitmap [414] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff,
    0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x01, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x07, 0xff, 0xff, 0xff,
    0x00, 0x03, 0xc0, 0x1f, 0x80, 0x0f, 0xff, 0xff, 0xff, 0x80, 0x0f, 0xc0, 0x1f, 0xe0, 0x0f, 0xff,
    0xff, 0xff, 0x80, 0x3f, 0xc0, 0x07, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0x80, 0xff, 0x00, 0x01, 0xfe,
    0x0f, 0xff, 0xff, 0xff, 0x83, 0xfc, 0x00, 0x00, 0x7f, 0x0f, 0xff, 0xff, 0xff, 0xc3, 0xf8, 0x00,
    0x00, 0x0e, 0x0f, 0xff, 0xff, 0xff, 0xc3, 0xc0, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xc0,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff,
    0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x1f,
    0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00,
    0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xe0, 0xf8,
    0x00, 0x3f, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xf0, 0x7f, 0xfc, 0x3f, 0xff, 0xff, 0xff,
    0xe1, 0xff, 0xf0, 0x7f, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xf0, 0x00, 0x00, 0x7f, 0xff,
    0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00,
    0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfe,
    0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff,
    0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x7c, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x03, 0xfc, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0xff, 0x00, 0x1f,
    0xf8, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0xff, 0xc0, 0x7f, 0xe0, 0x00, 0x0f, 0xff, 0xc0, 0x00, 0x3f,
    0xf0, 0x7f, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x03, 0xf0, 0x78, 0x00, 0x00, 0x03, 0xff, 0x00,
    0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };

  const uint8_t BELL_FALLEN_SMALL_W = 49, BELL_FALLEN_SMALL_H = 46;
  // 'bell_fallen_75x71', 49x46px
  const unsigned char bell_fallen_small_bitmap [322] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x00,
    0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x00,
    0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff,
    0xff, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf7,
    0x80, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf7, 0xc0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00,
    0x01, 0xff, 0xff, 0xff, 0xfb, 0xf8, 0x00, 0x03, 0xff, 0xff, 0xff, 0xfb, 0xf8, 0x00, 0x07, 0xff,
    0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xff, 0xff, 0xfd, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xff,
    0xfd, 0xfc, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xfe, 0xfc,
    0x00, 0x1f, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x3f,
    0xff, 0xff, 0xff, 0xff, 0x78, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x78, 0x00, 0x3f, 0xff, 0xff,
    0xff, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xa0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff,
    0x80, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
    0x1f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x1f, 0xff,
    0xff, 0xff, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xff, 0xff,
    0xff, 0xe0, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf0,
    0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00,
    0x3f, 0xff, 0xf8, 0x0f, 0xe0, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x80, 0x00, 0x00, 0x01, 0xf0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00
  };

  const uint8_t SETTINGS_GEAR_W = 40, SETTINGS_GEAR_H = 40;
  const int16_t SETTINGS_GEAR_X = TFT_WIDTH - SETTINGS_GEAR_W - 10, SETTINGS_GEAR_Y = DATE_ROW_Y0 - SETTINGS_GEAR_H + 5;
  // 'gear-settings-1-48', 40x40px
  const unsigned char settings_gear_bitmap[200] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 
    0x01, 0xff, 0x00, 0x00, 0x00, 0x01, 0xc3, 0x00, 0x00, 0x00, 0x01, 0x83, 0x80, 0x00, 0x00, 0x01, 
    0x83, 0x80, 0x00, 0x00, 0x03, 0x81, 0x80, 0x00, 0x07, 0x0f, 0x81, 0xe1, 0xe0, 0x0f, 0xff, 0x00, 
    0xff, 0xf0, 0x1d, 0xf8, 0x00, 0x3f, 0xf0, 0x18, 0x30, 0x00, 0x0c, 0x38, 0x38, 0x00, 0x38, 0x00, 
    0x18, 0x30, 0x00, 0xff, 0x00, 0x1c, 0x78, 0x03, 0xff, 0x80, 0x1c, 0x3c, 0x03, 0x81, 0xc0, 0x38, 
    0x1e, 0x07, 0x00, 0xe0, 0x70, 0x07, 0x0e, 0x00, 0x60, 0xe0, 0x07, 0x0c, 0x00, 0x60, 0xc0, 0x03, 
    0x0c, 0x00, 0x70, 0xc0, 0x07, 0x0c, 0x00, 0x70, 0xc0, 0x03, 0x0c, 0x00, 0x70, 0xc0, 0x07, 0x0e, 
    0x00, 0x60, 0xe0, 0x0e, 0x06, 0x00, 0xe0, 0xf0, 0x1c, 0x07, 0x01, 0xc0, 0x78, 0x38, 0x03, 0xc3, 
    0xc0, 0x3c, 0x70, 0x01, 0xff, 0x00, 0x1c, 0x30, 0x00, 0x7e, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x00, 
    0x18, 0x1c, 0xf8, 0x00, 0x1e, 0x38, 0x1f, 0xfc, 0x00, 0x7f, 0xf0, 0x0f, 0xdf, 0x01, 0xf3, 0xe0, 
    0x04, 0x07, 0x81, 0xc0, 0x40, 0x00, 0x01, 0x81, 0x80, 0x00, 0x00, 0x01, 0x83, 0x80, 0x00, 0x00, 
    0x01, 0x83, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 
    0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };

};

#endif    // RGB_DISPLAY_H